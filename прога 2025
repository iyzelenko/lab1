import tkinter as tk
from PIL import Image, ImageTk
import threading
import random
import time
import pygame
import os
import heapq

pygame.mixer.init()

class Cockroach:
    def __init__(self, power, mutation):
        self.power = power
        self.mutation = mutation

    def __repr__(self):
        return f"–¢–∞—Ä–∞–∫–∞–Ω(–º–æ—â—å={self.power}, –º—É—Ç–∞—Ü–∏—è='{self.mutation}')"

class Node:
    def __init__(self, x, y, g=0, h=0, parent=None):
        self.x = x
        self.y = y
        self.g = g
        self.h = h
        self.f = g + h
        self.parent = parent

    def __lt__(self, other):
        return self.f < other.f

class CockroachGame:
    def __init__(self, root):
        self.root = root
        self.root.title("–¢–∞—Ä–∞–∫–∞–Ω –£–ª—å—Ç—Ä–∞")
        self.root.geometry("1200x900")

        self.power = 1
        self.mutation = "–û–±—ã—á–Ω—ã–π —Ç–∞—Ä–∞–∫–∞–Ω"

        self.image_files = [f"cockroach_{i}.jpeg" for i in range(1, 6)]
        self.images = [Image.open(file).resize((150, 150), Image.LANCZOS) for file in self.image_files]

        self.angle = 0
        self.running = False
        self.rotating = False
        self.rotation_direction = 1
        self.animation_speed = 0.2
        self.dance_active = False
        self.bg_colors = ["lightblue", "lightgreen", "lightpink", "lightyellow", "lavender", "orange", "red"]
        self.current_color_index = 0
        self.sorting = False
        self.astar_active = False

        self.label_power = tk.Label(root, text=f"–ú–æ—â—å —Ç–∞—Ä–∞–∫–∞–Ω–∞: {self.power}", font=("Arial", 14))
        self.label_power.pack()

        self.label_mutation = tk.Label(root, text=f"–ú—É—Ç–∞—Ü–∏—è: {self.mutation}", font=("Arial", 12))
        self.label_mutation.pack()

        self.canvas = tk.Canvas(root, width=700, height=400, bg="lightblue")
        self.canvas.pack()

        

        self.path_canvas = tk.Canvas(root, width=700, height=200, bg="lightgrey")
        self.path_canvas.pack(pady=10)

        self.tk_image = None
        self.image_id = None
        self.x_pos = 350
        self.y_pos = 200
        self.update_image()

        buttons = [
    ("–ö–ª–∏–∫!", self.click),
    ("–ü–æ–≤–µ—Ä–Ω—É—Ç—å", self.rotate),
    ("–ù–∞—á–∞—Ç—å –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–Ω–∏–µ", self.start_rotation),
    ("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–Ω–∏–µ", self.stop_rotation),
    ("–°–º–µ–Ω–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", self.change_rotation),
    ("–°—Ç–∞—Ä—Ç –∞–Ω–∏–º–∞—Ü–∏–∏", self.start_animation),
    ("–°—Ç–æ–ø –∞–Ω–∏–º–∞—Ü–∏–∏", self.stop_animation),
    ("–£—Å–∫–æ—Ä–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é", self.speed_up),
    ("–°–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç —Ñ–æ–Ω–∞", self.change_background_color),
    ("üíÉ –¢–∞–Ω–µ—Ü + –º—É–∑—ã–∫–∞!", self.start_dance_party),
    
    ("A* –ø–æ–∏—Å–∫ –ø—É—Ç–∏", self.start_astar_thread),
]
        right_frame = tk.Frame(self.root)
right_frame.place(x=750, y=50)
for text, command in buttons:
    tk.Button(right_frame, text=text, width=25, command=command).pack(pady=2)

        self.root.bind("<Left>", self.move_left)
        self.root.bind("<Right>", self.move_right)
        self.root.bind("<Up>", self.move_up)
        self.root.bind("<Down>", self.move_down)

        
        threading.Thread(target=self.animate_images, daemon=True).start()
        threading.Thread(target=self.auto_rotate, daemon=True).start()

        

    def click(self):
        d = random.randint(-5, 10)
        self.power += d
        self.power = max(0, self.power)
        mutations = ["–ì–∏–≥–∞–Ω—Ç—Å–∫–∏–µ —É—Å—ã", "–†–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∞–ø–∫–∏", "–õ–∞–∑–µ—Ä–Ω—ã–µ –≥–ª–∞–∑–∞", "–õ–µ—Ç–∞—é—â–∏–π —Ç–∞—Ä–∞–∫–∞–Ω"]
        failures = ["–ü–æ—Ç–µ—Ä—è–ª –ª–∞–ø–∫—É", "–û–±–ª—ã—Å–µ–ª", "–ü–æ–ø–∞–ª –ø–æ–¥ —Ç–∞–ø–æ–∫, –Ω–æ –≤—ã–∂–∏–ª"]
        self.mutation = random.choice(mutations if d > 0 else failures)
        self.label_power.config(text=f"–ú–æ—â—å —Ç–∞—Ä–∞–∫–∞–Ω–∞: {self.power}")
        self.label_mutation.config(text=f"–ú—É—Ç–∞—Ü–∏—è: {self.mutation}")
        self.update_image()

    def update_image(self):
        if self.power <= 10:
            img = self.images[0]
        elif self.power <= 30:
            img = self.images[1]
        elif self.power <= 50:
            img = self.images[2]
        elif self.power <= 100:
            img = self.images[3]
        else:
            img = self.images[4]
        img = img.rotate(self.angle)
        self.tk_image = ImageTk.PhotoImage(img)
        if self.image_id:
            self.canvas.itemconfig(self.image_id, image=self.tk_image)
        else:
            self.image_id = self.canvas.create_image(self.x_pos, self.y_pos, image=self.tk_image, anchor=tk.CENTER)
        self.canvas.update()

    def rotate(self):
        self.angle = (self.angle + 45) % 360
        self.update_image()

    def animate_images(self):
        while True:
            if self.running:
                self.power += random.randint(-2, 5)
                self.update_image()
            time.sleep(self.animation_speed)

    def auto_rotate(self):
        while True:
            if self.rotating:
                self.angle = (self.angle + 10 * self.rotation_direction) % 360
                self.update_image()
            time.sleep(0.1)

    def start_animation(self):
        self.running = True

    def stop_animation(self):
        self.running = False

    def speed_up(self):
        self.animation_speed = max(0.05, self.animation_speed - 0.05)

    def start_rotation(self):
        self.rotating = True

    def stop_rotation(self):
        self.rotating = False

    def change_rotation(self):
        self.rotation_direction *= -1

    def change_background_color(self):
        self.current_color_index = (self.current_color_index + 1) % len(self.bg_colors)
        self.canvas.config(bg=self.bg_colors[self.current_color_index])

    def start_dance_party(self):
        if not self.dance_active:
            self.dance_active = True
            threading.Thread(target=self.dance_loop, daemon=True).start()
            threading.Thread(target=self.play_music, daemon=True).start()

    def play_music(self):
        try:
            music_path = "crazy_frog.mp3"
            pygame.mixer.music.load(music_path)
            pygame.mixer.music.play()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏: {e}")

    def dance_loop(self):
        directions = [15, -15]
        direction_index = 0
        for _ in range(100):
            self.angle += directions[direction_index]
            direction_index = (direction_index + 1) % 2
            self.y_pos += -10 if direction_index == 0 else 10
            self.canvas.move(self.image_id, 0, -10 if direction_index == 0 else 10)
            self.canvas.config(bg=random.choice(self.bg_colors))
            self.update_image()
            time.sleep(0.2)
        self.dance_active = False

    def move_left(self, event):
        if self.x_pos > 40:
            self.x_pos -= 20
            self.canvas.move(self.image_id, -20, 0)

    def move_right(self, event):
        if self.x_pos < 660:
            self.x_pos += 20
            self.canvas.move(self.image_id, 20, 0)

    def move_up(self, event):
        if self.y_pos > 40:
            self.y_pos -= 20
            self.canvas.move(self.image_id, 0, -20)

    def move_down(self, event):
        if self.y_pos < 360:
            self.y_pos += 20
            self.canvas.move(self.image_id, 0, 20)
    def start_astar_thread(self):
        if not self.astar_active:
            threading.Thread(target=self.run_astar, daemon=True).start()

    def run_astar(self):
        self.astar_active = True
        rows, cols = 10, 20
        grid = [[0]*cols for _ in range(rows)]
        start, goal = (0, 0), (9, 19)

        def heuristic(a, b):
            return abs(a[0] - b[0]) + abs(a[1] - b[1])

        open_list = []
        heapq.heappush(open_list, Node(*start, h=heuristic(start, goal)))
        closed_set = set()

        while open_list:
            current = heapq.heappop(open_list)
            if (current.x, current.y) == goal:
                path = []
                while current:
                    path.append((current.x, current.y))
                    current = current.parent
                self.draw_path(path[::-1])
                break

            closed_set.add((current.x, current.y))
            for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
                nx, ny = current.x + dx, current.y + dy
                if 0 <= nx < rows and 0 <= ny < cols and (nx, ny) not in closed_set:
                    neighbor = Node(nx, ny, current.g + 1, heuristic((nx, ny), goal), current)
                    heapq.heappush(open_list, neighbor)
            time.sleep(0.05)

        self.astar_active = False

    def draw_path(self, path):
        self.path_canvas.delete("all")
        size = 20
        for (x, y) in path:
            self.path_canvas.create_rectangle(y*size, x*size, y*size+size, x*size+size, fill="blue")

if __name__ == "__main__":
    root = tk.Tk()
    game = CockroachGame(root)
    root.mainloop()
