import tkinter as tk
import random
import threading
import time
import pygame

# --- Настройки ---
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600
COCKROACH_COUNT = 10
COCKROACH_WIDTH = 40
COCKROACH_HEIGHT = 20
TRACK_HEIGHT = 50
SLEEP_TIME = 0.05

# Инициализация Pygame для воспроизведения музыки
pygame.init()
pygame.mixer.init()
try:
    pygame.mixer.music.load("music.mp3")  # Подключи свой файл
except:
    print("Файл музыки не найден")

class Cockroach:
    def __init__(self, canvas, name, y_position, color):
        self.canvas = canvas
        self.name = name
        self.color = color
        self.y_position = y_position
        self.x_position = 10
        self.speed = random.uniform(1, 5)
        self.rect = self.canvas.create_rectangle(self.x_position, self.y_position,
                                                 self.x_position + COCKROACH_WIDTH,
                                                 self.y_position + COCKROACH_HEIGHT,
                                                 fill=self.color)
        self.thread = None

    def move(self):
        while self.x_position < WINDOW_WIDTH - 100:
            self.x_position += self.speed
            self.canvas.coords(self.rect, self.x_position, self.y_position,
                               self.x_position + COCKROACH_WIDTH,
                               self.y_position + COCKROACH_HEIGHT)
            time.sleep(SLEEP_TIME)

    def start_running(self):
        self.thread = threading.Thread(target=self.move)
        self.thread.start()

    def join(self):
        if self.thread:
            self.thread.join()

# Создание тараканов

def create_cockroaches(canvas):
    colors = ['red', 'blue', 'green', 'orange', 'purple', 'brown', 'pink', 'yellow', 'cyan', 'magenta']
    cockroaches = []
    for i in range(COCKROACH_COUNT):
        name = f"Таракан {i + 1}"
        y = i * TRACK_HEIGHT + 10
        cockroach = Cockroach(canvas, name, y, colors[i % len(colors)])
        cockroaches.append(cockroach)
    return cockroaches

# Эвристическая функция: выбор самого быстрого таракана

def heuristic_choice(cockroaches):
    fastest = max(cockroaches, key=lambda c: c.speed)
    print(f"Самый быстрый таракан: {fastest.name} (скорость: {fastest.speed:.2f})")
    return fastest

# Сортировка тараканов по скорости в потоке с визуализацией

def sort_cockroaches(canvas, bars_canvas, cockroaches):
    values = [c.speed for c in cockroaches]
    indices = list(range(len(values)))

    def draw_bars():
        bars_canvas.delete("all")
        bar_width = WINDOW_WIDTH // len(values)
        for i, v in enumerate(values):
            x0 = i * bar_width
            y0 = 100
            x1 = x0 + bar_width - 5
            y1 = y0 - int(v * 10)
            bars_canvas.create_rectangle(x0, y0, x1, y1, fill="skyblue")
        bars_canvas.update()

    def bubble_sort():
        for i in range(len(values)):
            for j in range(0, len(values) - i - 1):
                if values[j] > values[j + 1]:
                    values[j], values[j + 1] = values[j + 1], values[j]
                    indices[j], indices[j + 1] = indices[j + 1], indices[j]
                    draw_bars()
                    time.sleep(0.2)
        print("Сортировка завершена!")

    sort_thread = threading.Thread(target=bubble_sort)
    sort_thread.start()

# Запуск забега

def run_race(cockroaches):
    pygame.mixer.music.play(-1)
    for c in cockroaches:
        c.start_running()
    for c in cockroaches:
        c.join()
    heuristic_choice(cockroaches)
    pygame.mixer.music.stop()

# --- Интерфейс ---
root = tk.Tk()
root.title("Таракан Ультра")
root.geometry(f"{WINDOW_WIDTH+300}x{WINDOW_HEIGHT}")

main_frame = tk.Frame(root)
main_frame.pack(side="left")

canvas = tk.Canvas(main_frame, width=WINDOW_WIDTH, height=WINDOW_HEIGHT - 200, bg="white")
canvas.pack()

bars_canvas = tk.Canvas(main_frame, width=WINDOW_WIDTH, height=150, bg="black")
bars_canvas.pack()

button_frame = tk.Frame(root)
button_frame.pack(side="right", fill="y")

cockroaches = create_cockroaches(canvas)

start_button = tk.Button(button_frame, text="Запустить тараканов", command=lambda: run_race(cockroaches))
start_button.pack(pady=10, padx=10)

sort_button = tk.Button(button_frame, text="Сортировать по скорости", command=lambda: sort_cockroaches(canvas, bars_canvas, cockroaches))
sort_button.pack(pady=10, padx=10)

exit_button = tk.Button(button_frame, text="Выход", command=root.quit)
exit_button.pack(pady=10, padx=10)

root.mainloop()
