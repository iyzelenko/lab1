import math

# Уравнение
def f(x):
    return x * math.exp(x) - x - 1

# Метод дихотомии (бисекции)
def bisection_method(f, a, b, epsilon):
    assert f(a) * f(b) < 0, "Функция должна принимать значения разных знаков на концах интервала"
    while (b - a) / 2 > epsilon:
        midpoint = (a + b) / 2
        if f(midpoint) == 0:
            return midpoint
        elif f(a) * f(midpoint) < 0:
            b = midpoint
        else:
            a = midpoint
    return (a + b) / 2

# Метод итераций
def iteration_method(f, x0, epsilon, max_iterations=1000):
    x = x0
    for i in range(max_iterations):
        x_new = f(x)
        if abs(x_new - x) < epsilon:
            return x_new
        x = x_new
    raise ValueError("Метод итераций не сошелся")

# Метод хорд
def chord_method(f, a, b, epsilon, max_iterations=1000):
    for i in range(max_iterations):
        c = (a*f(b) - b*f(a)) / (f(b) - f(a))
        if f(c) == 0 or abs(b - a) < epsilon:
            return c
        if f(a) * f(c) < 0:
            b = c
        else:
            a = c
    raise ValueError("Метод хорд не сошелся")

# Метод Ньютона
def newton_method(f, f_prime, x0, epsilon, max_iterations=1000):
    x = x0
    for i in range(max_iterations):
        x_new = x - f(x) / f_prime(x)
        if abs(x_new - x) < epsilon:
            return x_new
        x = x_new
    raise ValueError("Метод Ньютона не сошелся")

# Применение методов для поиска корней
epsilon = 10e-6
a = -1
b = 1
x0 = 1
f_prime = lambda x: math.exp(x) + x * math.exp(x) - 1

# Результаты для каждого метода
result_bisection = bisection_method(f, a, b, epsilon)
result_iteration = iteration_method(lambda x: math.log(1 + x), x0, epsilon)
result_chord = chord_method(f, a, b, epsilon)
result_newton = newton_method(f, f_prime, x0, epsilon)

print("Корень методом дихотомии:", result_bisection)
print("Корень методом итераций:", result_iteration)
print("Корень методом хорд:", result_chord)
print("Корень методом Ньютона:", result_newton)
