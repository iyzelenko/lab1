import math

def f(x):
    return x * math.exp(x) - x - 1

def dichotomy_method(a, b, eps):
    while abs(b - a) > eps:
        c = (a + b) / 2
        if f(a) * f(c) < 0:
            b = c
        else:
            a = c
    return c

def iteration_method(x0, eps):
    x = x0
    x_prev = x0 + 2 * eps
    while abs(x - x_prev) > eps:
        x_prev = x
        x = x - f(x)
    return x

def chord_method(a, b, eps):
    x0 = (a * f(b) - b * f(a)) / (f(b) - f(a))
    x = x0
    while abs(f(x)) > eps:
        x = (a * f(b) - b * f(a)) / (f(b) - f(a))
        if f(a) * f(x) < 0:
            b = x
        else:
            a = x
    return x

def newton_method(x0, eps):
    x = x0
    x_prev = x0 + 2 * eps
    while abs(x - x_prev) > eps:
        x_prev = x
        derivative = math.exp(x) + x * math.exp(x) - 1
        x = x - f(x) / derivative
    return x

a = -1
b = 1
eps = 1e-6

print("Dichotomy method: ", dichotomy_method(a, b, eps))
print("Iteration method: ", iteration_method(1, eps))
print("Chord method: ", chord_method(a, b, eps))
print("Newton method: ", newton_method(1, eps))
